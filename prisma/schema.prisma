// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerk_id  String   @unique
  email     String   @unique
  username  String
  user_type UserType @default(FREE)
  store     Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id          String     @id @default(uuid())
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  name        String     @unique
  url         String     @unique
  description String?
  ruc         String?
  location    String
  city        String
  instagram   String?
  whatsapp    String?
  logo        String?
  products    Product[]
  categories  Category[]
  variants    Variant[]
  colors      Color[]
  orders      Order[]
  customers   Customer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String           @id @default(cuid())
  name        String
  isArchived  Boolean          @default(false)
  isFeatured  Boolean          @default(false)
  description String           @db.Text
  category    Category         @relation(fields: [categoryId], references: [id])
  categoryId  String
  variants    VariantProduct[]
  store       Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
  images      Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Variant {
  id          String           @id @default(cuid())
  name        String
  description String
  products    VariantProduct[]
  store       Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id       String           @id @default(cuid())
  name     String
  value    String
  products VariantProduct[]
  store    Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VariantProduct {
  id           String         @id @default(cuid())
  sku          String         @unique
  price        Int
  salePrice    Int?
  currency     Currency       @default(PYG)
  name         String?        @default("Normal")
  stock        Int            @default(1)
  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  color        Color?         @relation(fields: [colorId], references: [id])
  colorId      String?
  variant      Variant?       @relation(fields: [variantId], references: [id])
  variantId    String?
  OrderProduct OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, colorId, variantId])
}

model Order {
  id            String         @id @default(uuid())
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerId    String
  store         Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  total         Int
  orderProducts OrderProduct[]
  status        OrderStatus    @default(PENDIENTE)
  paymentStatus OrderPayment   @default(PENDIENTE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id        String         @id @default(cuid())
  order     Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  variant   VariantProduct @relation(fields: [variantId], references: [id])
  variantId String
  qty       Int
  total     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([variantId, orderId])
}

model Customer {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  ruc        String
  rucName    String
  tel        Int
  city       String
  direction1 String
  direction2 String
  email      String
  orders     Order[]
  store      Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  FREE
  PRO
  PREMIUM
}

enum OrderStatus {
  PENDIENTE
  ENTREGADO
  CANCELADO
}

enum OrderPayment {
  PENDIENTE
  CANCELADO
  PAGADO
}

enum Currency {
  PYG
  USD
}
