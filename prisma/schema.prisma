// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  clerk_id  String   @unique
  email     String   @unique
  username  String
  user_type UserType @default(FREE)
  store     Store[]
}

model Store {
  id          String     @id @default(uuid())
  owner       User       @relation(fields: [ownerId], references: [clerk_id], onDelete: Cascade)
  ownerId     String
  name        String     @unique
  tenant      String?    @unique
  url         String
  description String?
  ruc         String?
  location    String
  city        String
  products    Products[]
  categories  Category[]
  variants    Variant[]
  colors      Color[]
  orders      Order[]
  customers   Customer[]
}

model Products {
  id            String         @id @default(uuid())
  name          String
  price         Int
  discount      Int?
  description   String
  images        Image[]
  categories    Category[]
  variants      Variant[]
  colors        Color[]
  store         Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  orderProducts OrderProduct[]
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  products    Products[]
  store       Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
}

model Image {
  id        String   @id @default(uuid())
  url       String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Variant {
  id          String   @id @default(uuid())
  name        String
  description String
  product     Products @relation(fields: [productId], references: [id])
  productId   String
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  product   Products @relation(fields: [productId], references: [id])
  productId String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
}

model Order {
  id            String       @id @default(uuid())
  customer      Customer     @relation(fields: [customerId], references: [id])
  customerId    String
  store         Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  total         Int
  status        OrderStatus  @default(PENDIENTE)
  paymentStatus OrderPayment @default(PENDIENTE)
}

model OrderProduct {
  id        String   @id @default(uuid())
  product   Products @relation(fields: [productId], references: [id])
  productId String
  qty       Int
  total     Int
}

model Customer {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  ruc        String
  rucName    String
  tel        Int
  city       String
  direction1 String
  direction2 String
  email      String
  orders     Order[]
  store      Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String
}

enum UserType {
  FREE
  PRO
  PREMIUM
}

enum OrderStatus {
  PENDIENTE
  ENTREGADO
  CANCELADO
}

enum OrderPayment {
  PENDIENTE
  PAGO_PARCIAL
  PAGADO
}
