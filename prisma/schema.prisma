// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  clerk_id  String   @unique
  email     String   @unique
  username  String
  user_type UserType @default(FREE)
  store     Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id          String     @id @default(uuid())
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  name        String     @unique
  url         String     @unique
  description String?
  ruc         String?
  location    String
  city        String
  instagram   String?
  whatsapp    String?
  logo        String?
  products    Product[]
  categories  Category[]
  orders      Order[]
  customers   Customer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String         @id @default(cuid())
  name          String
  isFeatured    Boolean        @default(false)
  description   String         @db.Text
  price         Int?
  salePrice     Int?
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String
  variants      Variant[]
  store         Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  images        Image[]
  orderProducts OrderProduct[]
  status        ProductStatus  @default(EN_VENTA)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Variant {
  id        String           @id @default(cuid())
  name      String
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  options   VariantOptions[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VariantOptions {
  id           String         @id @default(cuid())
  name         String
  price        Int
  salePrice    Int?
  status       VariantStatus  @default(DISPONIBLE)
  variant      Variant        @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId    String
  orderProduct OrderProduct[]
}

model Order {
  id            Int            @id @default(autoincrement())
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerId    String
  store         Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String
  total         Int
  orderProducts OrderProduct[]
  status        OrderStatus    @default(PENDIENTE)
  paymentStatus OrderPayment   @default(PENDIENTE)
  paymentMethod PaymentMethod  @default(TRANSFERENCIA)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id        String          @id @default(cuid())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  variant   VariantOptions? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?
  qty       Int
  total     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id         String  @id @default(uuid())
  name       String
  lastName   String
  ruc        String
  rucName    String
  tel        Int
  city       String
  direction1 String
  direction2 String
  email      String
  orders     Order[]
  store      Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  FREE
  PRO
  PREMIUM
}

enum OrderStatus {
  PENDIENTE
  ENTREGADO
  CANCELADO
  PREPARANDO
}

enum OrderPayment {
  PENDIENTE
  CANCELADO
  PAGADO
}

enum Currency {
  PYG
  USD
}

enum PaymentMethod {
  TARJETA
  EFECTIVO
  TRANSFERENCIA
}

enum ProductStatus {
  EN_VENTA
  ARCHIVADO
  AGOTADO
}

enum VariantStatus {
  DISPONIBLE
  AGOTADO
}
